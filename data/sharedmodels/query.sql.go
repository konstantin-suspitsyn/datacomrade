// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package sharedmodels

import (
	"context"
	"database/sql"
	"time"
)

const countActiveRows = `-- name: CountActiveRows :one
SELECT count(*) from shared."domain"
where is_deleted = false
`

func (q *Queries) CountActiveRows(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActiveRows)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDomain = `-- name: CreateDomain :one
INSERT INTO shared."domain"
("name", description, user_id, is_deleted, created_at, updated_at)
VALUES($1, $2, $3, false, now(), now())
RETURNING id, name, description, is_deleted, created_at, updated_at, user_id
`

type CreateDomainParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	UserID      int64          `json:"user_id"`
}

func (q *Queries) CreateDomain(ctx context.Context, arg CreateDomainParams) (SharedDomain, error) {
	row := q.db.QueryRowContext(ctx, createDomain, arg.Name, arg.Description, arg.UserID)
	var i SharedDomain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteDomain = `-- name: DeleteDomain :exec
UPDATE shared."domain"
	SET is_deleted = true,
	updated_at = now(), 
	user_id = $2
WHERE id = $1
`

type DeleteDomainParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteDomain(ctx context.Context, arg DeleteDomainParams) error {
	_, err := q.db.ExecContext(ctx, deleteDomain, arg.ID, arg.UserID)
	return err
}

const getDomainById = `-- name: GetDomainById :one
SELECT id, "name", description, user_id, created_at, updated_at
FROM shared."domain"
where is_deleted = false
AND id = $1
`

type GetDomainByIdRow struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	UserID      int64          `json:"user_id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) GetDomainById(ctx context.Context, id int64) (GetDomainByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getDomainById, id)
	var i GetDomainByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDomains = `-- name: GetDomains :many
SELECT id, "name", description, user_id, created_at, updated_at
FROM shared."domain"
where is_deleted = false
ORDER BY id
`

type GetDomainsRow struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	UserID      int64          `json:"user_id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) GetDomains(ctx context.Context) ([]GetDomainsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDomainsRow
	for rows.Next() {
		var i GetDomainsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDomainsWithPager = `-- name: GetDomainsWithPager :many
SELECT id, "name", description, user_id, created_at, updated_at
FROM shared."domain"
where is_deleted = false
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetDomainsWithPagerParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type GetDomainsWithPagerRow struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	UserID      int64          `json:"user_id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) GetDomainsWithPager(ctx context.Context, arg GetDomainsWithPagerParams) ([]GetDomainsWithPagerRow, error) {
	rows, err := q.db.QueryContext(ctx, getDomainsWithPager, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDomainsWithPagerRow
	for rows.Next() {
		var i GetDomainsWithPagerRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOne = `-- name: UpdateOne :one
UPDATE shared."domain"
	SET 
	"name" = $1,
	description = $2,
	user_id = $3,
	updated_at = now()
WHERE id = $4
RETURNING id, name, description, is_deleted, created_at, updated_at, user_id
`

type UpdateOneParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	UserID      int64          `json:"user_id"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateOne(ctx context.Context, arg UpdateOneParams) (SharedDomain, error) {
	row := q.db.QueryRowContext(ctx, updateOne,
		arg.Name,
		arg.Description,
		arg.UserID,
		arg.ID,
	)
	var i SharedDomain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
