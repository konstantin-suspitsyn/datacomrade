// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sharedmodels

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSharedModelsInterface creates a new instance of MockSharedModelsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSharedModelsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSharedModelsInterface {
	mock := &MockSharedModelsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSharedModelsInterface is an autogenerated mock type for the SharedModelsInterface type
type MockSharedModelsInterface struct {
	mock.Mock
}

type MockSharedModelsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSharedModelsInterface) EXPECT() *MockSharedModelsInterface_Expecter {
	return &MockSharedModelsInterface_Expecter{mock: &_m.Mock}
}

// CountActiveRows provides a mock function for the type MockSharedModelsInterface
func (_mock *MockSharedModelsInterface) CountActiveRows(context1 context.Context) (int64, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for CountActiveRows")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSharedModelsInterface_CountActiveRows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountActiveRows'
type MockSharedModelsInterface_CountActiveRows_Call struct {
	*mock.Call
}

// CountActiveRows is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockSharedModelsInterface_Expecter) CountActiveRows(context1 interface{}) *MockSharedModelsInterface_CountActiveRows_Call {
	return &MockSharedModelsInterface_CountActiveRows_Call{Call: _e.mock.On("CountActiveRows", context1)}
}

func (_c *MockSharedModelsInterface_CountActiveRows_Call) Run(run func(context1 context.Context)) *MockSharedModelsInterface_CountActiveRows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSharedModelsInterface_CountActiveRows_Call) Return(n int64, err error) *MockSharedModelsInterface_CountActiveRows_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSharedModelsInterface_CountActiveRows_Call) RunAndReturn(run func(context1 context.Context) (int64, error)) *MockSharedModelsInterface_CountActiveRows_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDomain provides a mock function for the type MockSharedModelsInterface
func (_mock *MockSharedModelsInterface) CreateDomain(context1 context.Context, createDomainParams CreateDomainParams) (SharedDomain, error) {
	ret := _mock.Called(context1, createDomainParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 SharedDomain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateDomainParams) (SharedDomain, error)); ok {
		return returnFunc(context1, createDomainParams)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateDomainParams) SharedDomain); ok {
		r0 = returnFunc(context1, createDomainParams)
	} else {
		r0 = ret.Get(0).(SharedDomain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateDomainParams) error); ok {
		r1 = returnFunc(context1, createDomainParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSharedModelsInterface_CreateDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDomain'
type MockSharedModelsInterface_CreateDomain_Call struct {
	*mock.Call
}

// CreateDomain is a helper method to define mock.On call
//   - context1 context.Context
//   - createDomainParams CreateDomainParams
func (_e *MockSharedModelsInterface_Expecter) CreateDomain(context1 interface{}, createDomainParams interface{}) *MockSharedModelsInterface_CreateDomain_Call {
	return &MockSharedModelsInterface_CreateDomain_Call{Call: _e.mock.On("CreateDomain", context1, createDomainParams)}
}

func (_c *MockSharedModelsInterface_CreateDomain_Call) Run(run func(context1 context.Context, createDomainParams CreateDomainParams)) *MockSharedModelsInterface_CreateDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 CreateDomainParams
		if args[1] != nil {
			arg1 = args[1].(CreateDomainParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSharedModelsInterface_CreateDomain_Call) Return(sharedDomain SharedDomain, err error) *MockSharedModelsInterface_CreateDomain_Call {
	_c.Call.Return(sharedDomain, err)
	return _c
}

func (_c *MockSharedModelsInterface_CreateDomain_Call) RunAndReturn(run func(context1 context.Context, createDomainParams CreateDomainParams) (SharedDomain, error)) *MockSharedModelsInterface_CreateDomain_Call {
	_c.Call.Return(run)
	return _c
}
