// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: rolequery.sql

package rolesmodel

import (
	"context"
	"database/sql"
	"time"
)

const countActiveRows = `-- name: CountActiveRows :one
SELECT count(*) from users."role"
where is_deleted = false
`

func (q *Queries) CountActiveRows(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActiveRows)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO users."role"
(role_name_long, role_name_short, description, jwt_export, is_deleted, created_at, updated_at, user_id)
VALUES($1, $2, $3, $4, false, now(), now(), $5)
RETURNING id, role_name_long, role_name_short, description, jwt_export, is_deleted, created_at, updated_at, user_id
`

type CreateRoleParams struct {
	RoleNameLong  string
	RoleNameShort string
	Description   sql.NullString
	JwtExport     bool
	UserID        int64
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (UsersRole, error) {
	row := q.db.QueryRowContext(ctx, createRole,
		arg.RoleNameLong,
		arg.RoleNameShort,
		arg.Description,
		arg.JwtExport,
		arg.UserID,
	)
	var i UsersRole
	err := row.Scan(
		&i.ID,
		&i.RoleNameLong,
		&i.RoleNameShort,
		&i.Description,
		&i.JwtExport,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const createRoleAccess = `-- name: CreateRoleAccess :one
INSERT INTO users.role_access (
	role_id, resource_id, action_id, resource_type_id, is_deleted
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, role_id, resource_id, action_id, created_at, updated_at, is_deleted, resource_type_id
`

type CreateRoleAccessParams struct {
	RoleID         int64
	ResourceID     int64
	ActionID       int64
	ResourceTypeID int64
	IsDeleted      bool
}

func (q *Queries) CreateRoleAccess(ctx context.Context, arg CreateRoleAccessParams) (UsersRoleAccess, error) {
	row := q.db.QueryRowContext(ctx, createRoleAccess,
		arg.RoleID,
		arg.ResourceID,
		arg.ActionID,
		arg.ResourceTypeID,
		arg.IsDeleted,
	)
	var i UsersRoleAccess
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.ResourceID,
		&i.ActionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.ResourceTypeID,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
UPDATE users.role_access
	SET is_deleted = true,
	updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getJWTShortRolesByUserId = `-- name: GetJWTShortRolesByUserId :many
SELECT user_role.id, user_role.user_id, user_role.role_id, role.role_name_short 
FROM users.user_role
inner join users."role"
	on "role".id = user_role.role_id
	and "role".is_deleted = false
	and "role".jwt_export = true
where user_role.user_id = $1
and user_role.is_deleted = false
`

type GetJWTShortRolesByUserIdRow struct {
	ID            int64
	UserID        int64
	RoleID        int64
	RoleNameShort string
}

func (q *Queries) GetJWTShortRolesByUserId(ctx context.Context, userID int64) ([]GetJWTShortRolesByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getJWTShortRolesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJWTShortRolesByUserIdRow
	for rows.Next() {
		var i GetJWTShortRolesByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoleID,
			&i.RoleNameShort,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleAccessById = `-- name: GetRoleAccessById :one
SELECT id, role_id, resource_id, action_id, created_at, updated_at, is_deleted, resource_type_id FROM  users.role_access
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoleAccessById(ctx context.Context, id int64) (UsersRoleAccess, error) {
	row := q.db.QueryRowContext(ctx, getRoleAccessById, id)
	var i UsersRoleAccess
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.ResourceID,
		&i.ActionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.ResourceTypeID,
	)
	return i, err
}

const getRolesWithPager = `-- name: GetRolesWithPager :many
SELECT id, role_name_long, role_name_short, description, jwt_export, created_at, updated_at
FROM users."role"
where is_deleted = false
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetRolesWithPagerParams struct {
	Limit  int64
	Offset int64
}

type GetRolesWithPagerRow struct {
	ID            int64
	RoleNameLong  string
	RoleNameShort string
	Description   sql.NullString
	JwtExport     bool
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) GetRolesWithPager(ctx context.Context, arg GetRolesWithPagerParams) ([]GetRolesWithPagerRow, error) {
	rows, err := q.db.QueryContext(ctx, getRolesWithPager, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolesWithPagerRow
	for rows.Next() {
		var i GetRolesWithPagerRow
		if err := rows.Scan(
			&i.ID,
			&i.RoleNameLong,
			&i.RoleNameShort,
			&i.Description,
			&i.JwtExport,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAccessById = `-- name: GetUserAccessById :one
SELECT id, user_id, resource_id, action_id, created_at, updated_at, is_deleted, resource_type_id FROM  users.user_access
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserAccessById(ctx context.Context, id int64) (UsersUserAccess, error) {
	row := q.db.QueryRowContext(ctx, getUserAccessById, id)
	var i UsersUserAccess
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResourceID,
		&i.ActionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.ResourceTypeID,
	)
	return i, err
}

const listUserAccess = `-- name: ListUserAccess :many
SELECT id, role_id, resource_id, action_id, created_at, updated_at, is_deleted, resource_type_id FROM users.role_access
ORDER BY id
`

func (q *Queries) ListUserAccess(ctx context.Context) ([]UsersRoleAccess, error) {
	rows, err := q.db.QueryContext(ctx, listUserAccess)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersRoleAccess
	for rows.Next() {
		var i UsersRoleAccess
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.ResourceID,
			&i.ActionID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
			&i.ResourceTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
