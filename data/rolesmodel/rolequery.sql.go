// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rolequery.sql

package rolesmodel

import (
	"context"
)

const createRoleAccess = `-- name: CreateRoleAccess :one
INSERT INTO users.role_access (
	role_id, resource_id, action_id, resource_type_id, is_deleted
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, role_id, resource_id, action_id, created_at, updated_at, is_deleted, resource_type_id
`

type CreateRoleAccessParams struct {
	RoleID         int64
	ResourceID     int64
	ActionID       int64
	ResourceTypeID int64
	IsDeleted      bool
}

func (q *Queries) CreateRoleAccess(ctx context.Context, arg CreateRoleAccessParams) (UsersRoleAccess, error) {
	row := q.db.QueryRow(ctx, createRoleAccess,
		arg.RoleID,
		arg.ResourceID,
		arg.ActionID,
		arg.ResourceTypeID,
		arg.IsDeleted,
	)
	var i UsersRoleAccess
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.ResourceID,
		&i.ActionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.ResourceTypeID,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
UPDATE users.role_access
	SET is_deleted = false,
	updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getRoleAccessById = `-- name: GetRoleAccessById :one
SELECT id, role_id, resource_id, action_id, created_at, updated_at, is_deleted, resource_type_id FROM  users.role_access
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoleAccessById(ctx context.Context, id int64) (UsersRoleAccess, error) {
	row := q.db.QueryRow(ctx, getRoleAccessById, id)
	var i UsersRoleAccess
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.ResourceID,
		&i.ActionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.ResourceTypeID,
	)
	return i, err
}

const getUserAccessById = `-- name: GetUserAccessById :one
SELECT id, user_id, resource_id, action_id, created_at, updated_at, is_deleted, resource_type_id FROM  users.user_access
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserAccessById(ctx context.Context, id int64) (UsersUserAccess, error) {
	row := q.db.QueryRow(ctx, getUserAccessById, id)
	var i UsersUserAccess
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResourceID,
		&i.ActionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.ResourceTypeID,
	)
	return i, err
}

const listUserAccess = `-- name: ListUserAccess :many
SELECT id, role_id, resource_id, action_id, created_at, updated_at, is_deleted, resource_type_id FROM users.role_access
ORDER BY id
`

func (q *Queries) ListUserAccess(ctx context.Context) ([]UsersRoleAccess, error) {
	rows, err := q.db.Query(ctx, listUserAccess)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersRoleAccess
	for rows.Next() {
		var i UsersRoleAccess
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.ResourceID,
			&i.ActionID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
			&i.ResourceTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
